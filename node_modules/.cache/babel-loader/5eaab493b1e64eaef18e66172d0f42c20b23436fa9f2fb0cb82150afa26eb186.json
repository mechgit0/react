{"ast":null,"code":"'use strict';\n\nconst url = require('url');\nconst http = require('http');\nconst https = require('https');\nconst {\n  gzipSync\n} = require('zlib');\nconst {\n  globalRegistry\n} = require('./registry');\nclass Pushgateway {\n  constructor(gatewayUrl, options, registry) {\n    if (!registry) {\n      registry = globalRegistry;\n    }\n    this.registry = registry;\n    this.gatewayUrl = gatewayUrl;\n    const {\n      requireJobName,\n      ...requestOptions\n    } = {\n      requireJobName: true,\n      ...options\n    };\n    this.requireJobName = requireJobName;\n    this.requestOptions = requestOptions;\n  }\n  pushAdd() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.requireJobName && !params.jobName) {\n      throw new Error('Missing jobName parameter');\n    }\n    return useGateway.call(this, 'POST', params.jobName, params.groupings);\n  }\n  push() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.requireJobName && !params.jobName) {\n      throw new Error('Missing jobName parameter');\n    }\n    return useGateway.call(this, 'PUT', params.jobName, params.groupings);\n  }\n  delete() {\n    let params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    if (this.requireJobName && !params.jobName) {\n      throw new Error('Missing jobName parameter');\n    }\n    return useGateway.call(this, 'DELETE', params.jobName, params.groupings);\n  }\n}\nasync function useGateway(method, job, groupings) {\n  // `URL` first added in v6.13.0\n  // eslint-disable-next-line n/no-deprecated-api\n  const gatewayUrlParsed = url.parse(this.gatewayUrl);\n  const gatewayUrlPath = gatewayUrlParsed.pathname && gatewayUrlParsed.pathname !== '/' ? gatewayUrlParsed.pathname : '';\n  const jobPath = job ? `/job/${encodeURIComponent(job)}${generateGroupings(groupings)}` : '';\n  const path = `${gatewayUrlPath}/metrics${jobPath}`;\n\n  // eslint-disable-next-line n/no-deprecated-api\n  const target = url.resolve(this.gatewayUrl, path);\n  // eslint-disable-next-line n/no-deprecated-api\n  const requestParams = url.parse(target);\n  const httpModule = isHttps(requestParams.href) ? https : http;\n  const options = Object.assign(requestParams, this.requestOptions, {\n    method\n  });\n  return new Promise((resolve, reject) => {\n    if (method === 'DELETE' && options.headers) {\n      delete options.headers['Content-Encoding'];\n    }\n    const req = httpModule.request(options, resp => {\n      let body = '';\n      resp.setEncoding('utf8');\n      resp.on('data', chunk => {\n        body += chunk;\n      });\n      resp.on('end', () => {\n        if (resp.statusCode >= 400) {\n          reject(new Error(`push failed with status ${resp.statusCode}, ${body}`));\n        } else {\n          resolve({\n            resp,\n            body\n          });\n        }\n      });\n    });\n    req.on('error', err => {\n      reject(err);\n    });\n    req.on('timeout', () => {\n      req.destroy(new Error('Pushgateway request timed out'));\n    });\n    if (method !== 'DELETE') {\n      this.registry.metrics().then(metrics => {\n        if (options.headers && options.headers['Content-Encoding'] === 'gzip') {\n          metrics = gzipSync(metrics);\n        }\n        req.write(metrics);\n        req.end();\n      }).catch(err => {\n        reject(err);\n      });\n    } else {\n      req.end();\n    }\n  });\n}\nfunction generateGroupings(groupings) {\n  if (!groupings) {\n    return '';\n  }\n  return Object.keys(groupings).map(key => `/${encodeURIComponent(key)}/${encodeURIComponent(groupings[key])}`).join('');\n}\nfunction isHttps(href) {\n  return href.search(/^https/) !== -1;\n}\nmodule.exports = Pushgateway;","map":{"version":3,"names":["url","require","http","https","gzipSync","globalRegistry","Pushgateway","constructor","gatewayUrl","options","registry","requireJobName","requestOptions","pushAdd","params","arguments","length","undefined","jobName","Error","useGateway","call","groupings","push","delete","method","job","gatewayUrlParsed","parse","gatewayUrlPath","pathname","jobPath","encodeURIComponent","generateGroupings","path","target","resolve","requestParams","httpModule","isHttps","href","Object","assign","Promise","reject","headers","req","request","resp","body","setEncoding","on","chunk","statusCode","err","destroy","metrics","then","write","end","catch","keys","map","key","join","search","module","exports"],"sources":["/home/ashish/my-react-app/node_modules/prom-client/lib/pushgateway.js"],"sourcesContent":["'use strict';\n\nconst url = require('url');\nconst http = require('http');\nconst https = require('https');\nconst { gzipSync } = require('zlib');\nconst { globalRegistry } = require('./registry');\n\nclass Pushgateway {\n\tconstructor(gatewayUrl, options, registry) {\n\t\tif (!registry) {\n\t\t\tregistry = globalRegistry;\n\t\t}\n\t\tthis.registry = registry;\n\t\tthis.gatewayUrl = gatewayUrl;\n\t\tconst { requireJobName, ...requestOptions } = {\n\t\t\trequireJobName: true,\n\t\t\t...options,\n\t\t};\n\t\tthis.requireJobName = requireJobName;\n\t\tthis.requestOptions = requestOptions;\n\t}\n\n\tpushAdd(params = {}) {\n\t\tif (this.requireJobName && !params.jobName) {\n\t\t\tthrow new Error('Missing jobName parameter');\n\t\t}\n\n\t\treturn useGateway.call(this, 'POST', params.jobName, params.groupings);\n\t}\n\n\tpush(params = {}) {\n\t\tif (this.requireJobName && !params.jobName) {\n\t\t\tthrow new Error('Missing jobName parameter');\n\t\t}\n\n\t\treturn useGateway.call(this, 'PUT', params.jobName, params.groupings);\n\t}\n\n\tdelete(params = {}) {\n\t\tif (this.requireJobName && !params.jobName) {\n\t\t\tthrow new Error('Missing jobName parameter');\n\t\t}\n\n\t\treturn useGateway.call(this, 'DELETE', params.jobName, params.groupings);\n\t}\n}\nasync function useGateway(method, job, groupings) {\n\t// `URL` first added in v6.13.0\n\t// eslint-disable-next-line n/no-deprecated-api\n\tconst gatewayUrlParsed = url.parse(this.gatewayUrl);\n\tconst gatewayUrlPath =\n\t\tgatewayUrlParsed.pathname && gatewayUrlParsed.pathname !== '/'\n\t\t\t? gatewayUrlParsed.pathname\n\t\t\t: '';\n\tconst jobPath = job\n\t\t? `/job/${encodeURIComponent(job)}${generateGroupings(groupings)}`\n\t\t: '';\n\tconst path = `${gatewayUrlPath}/metrics${jobPath}`;\n\n\t// eslint-disable-next-line n/no-deprecated-api\n\tconst target = url.resolve(this.gatewayUrl, path);\n\t// eslint-disable-next-line n/no-deprecated-api\n\tconst requestParams = url.parse(target);\n\tconst httpModule = isHttps(requestParams.href) ? https : http;\n\tconst options = Object.assign(requestParams, this.requestOptions, {\n\t\tmethod,\n\t});\n\n\treturn new Promise((resolve, reject) => {\n\t\tif (method === 'DELETE' && options.headers) {\n\t\t\tdelete options.headers['Content-Encoding'];\n\t\t}\n\t\tconst req = httpModule.request(options, resp => {\n\t\t\tlet body = '';\n\t\t\tresp.setEncoding('utf8');\n\t\t\tresp.on('data', chunk => {\n\t\t\t\tbody += chunk;\n\t\t\t});\n\t\t\tresp.on('end', () => {\n\t\t\t\tif (resp.statusCode >= 400) {\n\t\t\t\t\treject(\n\t\t\t\t\t\tnew Error(`push failed with status ${resp.statusCode}, ${body}`),\n\t\t\t\t\t);\n\t\t\t\t} else {\n\t\t\t\t\tresolve({ resp, body });\n\t\t\t\t}\n\t\t\t});\n\t\t});\n\t\treq.on('error', err => {\n\t\t\treject(err);\n\t\t});\n\n\t\treq.on('timeout', () => {\n\t\t\treq.destroy(new Error('Pushgateway request timed out'));\n\t\t});\n\n\t\tif (method !== 'DELETE') {\n\t\t\tthis.registry\n\t\t\t\t.metrics()\n\t\t\t\t.then(metrics => {\n\t\t\t\t\tif (\n\t\t\t\t\t\toptions.headers &&\n\t\t\t\t\t\toptions.headers['Content-Encoding'] === 'gzip'\n\t\t\t\t\t) {\n\t\t\t\t\t\tmetrics = gzipSync(metrics);\n\t\t\t\t\t}\n\t\t\t\t\treq.write(metrics);\n\t\t\t\t\treq.end();\n\t\t\t\t})\n\t\t\t\t.catch(err => {\n\t\t\t\t\treject(err);\n\t\t\t\t});\n\t\t} else {\n\t\t\treq.end();\n\t\t}\n\t});\n}\n\nfunction generateGroupings(groupings) {\n\tif (!groupings) {\n\t\treturn '';\n\t}\n\treturn Object.keys(groupings)\n\t\t.map(\n\t\t\tkey =>\n\t\t\t\t`/${encodeURIComponent(key)}/${encodeURIComponent(groupings[key])}`,\n\t\t)\n\t\t.join('');\n}\n\nfunction isHttps(href) {\n\treturn href.search(/^https/) !== -1;\n}\n\nmodule.exports = Pushgateway;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}