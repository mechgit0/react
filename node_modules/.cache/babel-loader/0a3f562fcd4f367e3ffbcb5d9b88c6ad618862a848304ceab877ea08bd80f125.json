{"ast":null,"code":"const express=require('express');const next=require('next');const client=require('prom-client');// Import Prometheus client\nconst dev=process.env.NODE_ENV!=='production';const app=next({dev});const handle=app.getRequestHandler();app.prepare().then(()=>{const server=express();// Create a registry for Prometheus metrics\nconst register=new client.Registry();// Define a counter metric for HTTP requests\nconst httpRequestCount=new client.Counter({name:'http_requests_total',help:'Total number of HTTP requests',labelNames:['method','status']});// Register the counter metric\nregister.registerMetric(httpRequestCount);// Define a histogram metric for HTTP request durations\nconst httpRequestDuration=new client.Histogram({name:'http_request_duration_seconds',help:'Histogram of HTTP request durations',labelNames:['method','status'],buckets:[0.1,0.2,0.5,1,2,5,10]// Define latency buckets\n});// Register the histogram metric\nregister.registerMetric(httpRequestDuration);// Middleware to track request count and duration\nserver.use((req,res,next)=>{const start=Date.now();res.on('finish',()=>{// Increment the HTTP request counter\nhttpRequestCount.inc({method:req.method,status:res.statusCode});// Record the request duration\nconst duration=(Date.now()-start)/1000;// Duration in seconds\nhttpRequestDuration.observe({method:req.method,status:res.statusCode},duration);});next();});// Expose the /metrics endpoint for Prometheus scraping\nserver.get('/metrics',async(req,res)=>{res.set('Content-Type',register.contentType);res.end(await register.metrics());});// Default Next.js request handler\nserver.all('*',(req,res)=>{return handle(req,res);});// Start the server\nserver.listen(3000,err=>{if(err)throw err;console.log('> Ready on http://localhost:3000');});});","map":{"version":3,"names":["express","require","next","client","dev","process","env","NODE_ENV","app","handle","getRequestHandler","prepare","then","server","register","Registry","httpRequestCount","Counter","name","help","labelNames","registerMetric","httpRequestDuration","Histogram","buckets","use","req","res","start","Date","now","on","inc","method","status","statusCode","duration","observe","get","set","contentType","end","metrics","all","listen","err","console","log"],"sources":["/home/ashish/my-react-app/src/index.js"],"sourcesContent":["const express = require('express');\nconst next = require('next');\nconst client = require('prom-client'); // Import Prometheus client\n\nconst dev = process.env.NODE_ENV !== 'production';\nconst app = next({ dev });\nconst handle = app.getRequestHandler();\n\napp.prepare().then(() => {\n  const server = express();\n\n  // Create a registry for Prometheus metrics\n  const register = new client.Registry();\n\n  // Define a counter metric for HTTP requests\n  const httpRequestCount = new client.Counter({\n    name: 'http_requests_total',\n    help: 'Total number of HTTP requests',\n    labelNames: ['method', 'status'],\n  });\n\n  // Register the counter metric\n  register.registerMetric(httpRequestCount);\n\n  // Define a histogram metric for HTTP request durations\n  const httpRequestDuration = new client.Histogram({\n    name: 'http_request_duration_seconds',\n    help: 'Histogram of HTTP request durations',\n    labelNames: ['method', 'status'],\n    buckets: [0.1, 0.2, 0.5, 1, 2, 5, 10], // Define latency buckets\n  });\n\n  // Register the histogram metric\n  register.registerMetric(httpRequestDuration);\n\n  // Middleware to track request count and duration\n  server.use((req, res, next) => {\n    const start = Date.now();\n    res.on('finish', () => {\n      // Increment the HTTP request counter\n      httpRequestCount.inc({ method: req.method, status: res.statusCode });\n\n      // Record the request duration\n      const duration = (Date.now() - start) / 1000; // Duration in seconds\n      httpRequestDuration.observe({ method: req.method, status: res.statusCode }, duration);\n    });\n    next();\n  });\n\n  // Expose the /metrics endpoint for Prometheus scraping\n  server.get('/metrics', async (req, res) => {\n    res.set('Content-Type', register.contentType);\n    res.end(await register.metrics());\n  });\n\n  // Default Next.js request handler\n  server.all('*', (req, res) => {\n    return handle(req, res);\n  });\n\n  // Start the server\n  server.listen(3000, (err) => {\n    if (err) throw err;\n    console.log('> Ready on http://localhost:3000');\n  });\n});\n\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}