{"ast":null,"code":"'use strict';\n\n/**\n * Class representing an OpenMetrics exemplar.\n *\n * @property {object} labelSet\n * @property {number} value\n * @property {number} [timestamp]\n * */\nclass Exemplar {\n  constructor() {\n    let labelSet = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    let value = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n    this.labelSet = labelSet;\n    this.value = value;\n  }\n\n  /**\n   * Validation for the label set format.\n   * https://github.com/OpenObservability/OpenMetrics/blob/d99b705f611b75fec8f450b05e344e02eea6921d/specification/OpenMetrics.md#exemplars\n   *\n   * @param {object} labelSet - Exemplar labels.\n   * @throws {RangeError}\n   * @return {void}\n   */\n  validateExemplarLabelSet(labelSet) {\n    let res = '';\n    for (const [labelName, labelValue] of Object.entries(labelSet)) {\n      res += `${labelName}${labelValue}`;\n    }\n    if (res.length > 128) {\n      throw new RangeError('Label set size must be smaller than 128 UTF-8 chars');\n    }\n  }\n}\nmodule.exports = Exemplar;","map":{"version":3,"names":["Exemplar","constructor","labelSet","arguments","length","undefined","value","validateExemplarLabelSet","res","labelName","labelValue","Object","entries","RangeError","module","exports"],"sources":["/home/ashish/my-react-app/node_modules/prom-client/lib/exemplar.js"],"sourcesContent":["'use strict';\n\n/**\n * Class representing an OpenMetrics exemplar.\n *\n * @property {object} labelSet\n * @property {number} value\n * @property {number} [timestamp]\n * */\nclass Exemplar {\n\tconstructor(labelSet = {}, value = null) {\n\t\tthis.labelSet = labelSet;\n\t\tthis.value = value;\n\t}\n\n\t/**\n\t * Validation for the label set format.\n\t * https://github.com/OpenObservability/OpenMetrics/blob/d99b705f611b75fec8f450b05e344e02eea6921d/specification/OpenMetrics.md#exemplars\n\t *\n\t * @param {object} labelSet - Exemplar labels.\n\t * @throws {RangeError}\n\t * @return {void}\n\t */\n\tvalidateExemplarLabelSet(labelSet) {\n\t\tlet res = '';\n\t\tfor (const [labelName, labelValue] of Object.entries(labelSet)) {\n\t\t\tres += `${labelName}${labelValue}`;\n\t\t}\n\t\tif (res.length > 128) {\n\t\t\tthrow new RangeError(\n\t\t\t\t'Label set size must be smaller than 128 UTF-8 chars',\n\t\t\t);\n\t\t}\n\t}\n}\n\nmodule.exports = Exemplar;\n"],"mappings":"AAAA,YAAY;;AAEZ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,MAAMA,QAAQ,CAAC;EACdC,WAAWA,CAAA,EAA8B;IAAA,IAA7BC,QAAQ,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,CAAC,CAAC;IAAA,IAAEG,KAAK,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAG,IAAI;IACtC,IAAI,CAACD,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACI,KAAK,GAAGA,KAAK;EACnB;;EAEA;AACD;AACA;AACA;AACA;AACA;AACA;AACA;EACCC,wBAAwBA,CAACL,QAAQ,EAAE;IAClC,IAAIM,GAAG,GAAG,EAAE;IACZ,KAAK,MAAM,CAACC,SAAS,EAAEC,UAAU,CAAC,IAAIC,MAAM,CAACC,OAAO,CAACV,QAAQ,CAAC,EAAE;MAC/DM,GAAG,IAAI,GAAGC,SAAS,GAAGC,UAAU,EAAE;IACnC;IACA,IAAIF,GAAG,CAACJ,MAAM,GAAG,GAAG,EAAE;MACrB,MAAM,IAAIS,UAAU,CACnB,qDACD,CAAC;IACF;EACD;AACD;AAEAC,MAAM,CAACC,OAAO,GAAGf,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}