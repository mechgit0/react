{"ast":null,"code":"'use strict';\n\nconst {\n  Grouper,\n  hashObject\n} = require('./util');\n\n/**\n * Returns a new function that applies the `aggregatorFn` to the values.\n * @param {Function} aggregatorFn function to apply to values.\n * @return {Function} aggregator function\n */\nfunction AggregatorFactory(aggregatorFn) {\n  return metrics => {\n    if (metrics.length === 0) return;\n    const result = {\n      help: metrics[0].help,\n      name: metrics[0].name,\n      type: metrics[0].type,\n      values: [],\n      aggregator: metrics[0].aggregator\n    };\n    // Gather metrics by metricName and labels.\n    const byLabels = new Grouper();\n    metrics.forEach(metric => {\n      metric.values.forEach(value => {\n        const key = hashObject(value.labels);\n        byLabels.add(`${value.metricName}_${key}`, value);\n      });\n    });\n    // Apply aggregator function to gathered metrics.\n    byLabels.forEach(values => {\n      if (values.length === 0) return;\n      const valObj = {\n        value: aggregatorFn(values),\n        labels: values[0].labels\n      };\n      if (values[0].metricName) {\n        valObj.metricName = values[0].metricName;\n      }\n      // NB: Timestamps are omitted.\n      result.values.push(valObj);\n    });\n    return result;\n  };\n}\n// Export for users to define their own aggregation methods.\nexports.AggregatorFactory = AggregatorFactory;\n\n/**\n * Functions that can be used to aggregate metrics from multiple registries.\n */\nexports.aggregators = {\n  /**\n   * @return The sum of values.\n   */\n  sum: AggregatorFactory(v => v.reduce((p, c) => p + c.value, 0)),\n  /**\n   * @return The first value.\n   */\n  first: AggregatorFactory(v => v[0].value),\n  /**\n   * @return {undefined} Undefined; omits the metric.\n   */\n  omit: () => {},\n  /**\n   * @return The arithmetic mean of the values.\n   */\n  average: AggregatorFactory(v => v.reduce((p, c) => p + c.value, 0) / v.length),\n  /**\n   * @return The minimum of the values.\n   */\n  min: AggregatorFactory(v => v.reduce((p, c) => Math.min(p, c.value), Infinity)),\n  /**\n   * @return The maximum of the values.\n   */\n  max: AggregatorFactory(v => v.reduce((p, c) => Math.max(p, c.value), -Infinity))\n};","map":{"version":3,"names":["Grouper","hashObject","require","AggregatorFactory","aggregatorFn","metrics","length","result","help","name","type","values","aggregator","byLabels","forEach","metric","value","key","labels","add","metricName","valObj","push","exports","aggregators","sum","v","reduce","p","c","first","omit","average","min","Math","Infinity","max"],"sources":["/home/ashish/my-react-app/node_modules/prom-client/lib/metricAggregators.js"],"sourcesContent":["'use strict';\n\nconst { Grouper, hashObject } = require('./util');\n\n/**\n * Returns a new function that applies the `aggregatorFn` to the values.\n * @param {Function} aggregatorFn function to apply to values.\n * @return {Function} aggregator function\n */\nfunction AggregatorFactory(aggregatorFn) {\n\treturn metrics => {\n\t\tif (metrics.length === 0) return;\n\t\tconst result = {\n\t\t\thelp: metrics[0].help,\n\t\t\tname: metrics[0].name,\n\t\t\ttype: metrics[0].type,\n\t\t\tvalues: [],\n\t\t\taggregator: metrics[0].aggregator,\n\t\t};\n\t\t// Gather metrics by metricName and labels.\n\t\tconst byLabels = new Grouper();\n\t\tmetrics.forEach(metric => {\n\t\t\tmetric.values.forEach(value => {\n\t\t\t\tconst key = hashObject(value.labels);\n\t\t\t\tbyLabels.add(`${value.metricName}_${key}`, value);\n\t\t\t});\n\t\t});\n\t\t// Apply aggregator function to gathered metrics.\n\t\tbyLabels.forEach(values => {\n\t\t\tif (values.length === 0) return;\n\t\t\tconst valObj = {\n\t\t\t\tvalue: aggregatorFn(values),\n\t\t\t\tlabels: values[0].labels,\n\t\t\t};\n\t\t\tif (values[0].metricName) {\n\t\t\t\tvalObj.metricName = values[0].metricName;\n\t\t\t}\n\t\t\t// NB: Timestamps are omitted.\n\t\t\tresult.values.push(valObj);\n\t\t});\n\t\treturn result;\n\t};\n}\n// Export for users to define their own aggregation methods.\nexports.AggregatorFactory = AggregatorFactory;\n\n/**\n * Functions that can be used to aggregate metrics from multiple registries.\n */\nexports.aggregators = {\n\t/**\n\t * @return The sum of values.\n\t */\n\tsum: AggregatorFactory(v => v.reduce((p, c) => p + c.value, 0)),\n\t/**\n\t * @return The first value.\n\t */\n\tfirst: AggregatorFactory(v => v[0].value),\n\t/**\n\t * @return {undefined} Undefined; omits the metric.\n\t */\n\tomit: () => {},\n\t/**\n\t * @return The arithmetic mean of the values.\n\t */\n\taverage: AggregatorFactory(\n\t\tv => v.reduce((p, c) => p + c.value, 0) / v.length,\n\t),\n\t/**\n\t * @return The minimum of the values.\n\t */\n\tmin: AggregatorFactory(v =>\n\t\tv.reduce((p, c) => Math.min(p, c.value), Infinity),\n\t),\n\t/**\n\t * @return The maximum of the values.\n\t */\n\tmax: AggregatorFactory(v =>\n\t\tv.reduce((p, c) => Math.max(p, c.value), -Infinity),\n\t),\n};\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"script","externalDependencies":[]}